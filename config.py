import os
from dotenv import load_dotenv

load_dotenv()

SCHEDULER_POSTGRES_DB = str(os.environ["SCHEDULER_POSTGRES_DB"])
SCHEDULER_POSTGRES_USER = str(os.environ["SCHEDULER_POSTGRES_USER"])
SCHEDULER_POSTGRES_PASSWORD = str(os.environ["SCHEDULER_POSTGRES_PASSWORD"])
SCHEDULER_POSTGRES_HOST = str(os.environ["SCHEDULER_POSTGRES_HOST"])
SCHEDULER_POSTGRES_PORT = int(os.environ["SCHEDULER_POSTGRES_PORT"])
SCHEDULER_POSTGRES_DATABASE_URL = f"postgresql+asyncpg://{SCHEDULER_POSTGRES_USER}:{SCHEDULER_POSTGRES_PASSWORD}@{SCHEDULER_POSTGRES_HOST}:{SCHEDULER_POSTGRES_PORT}/{SCHEDULER_POSTGRES_DB}"
print(SCHEDULER_POSTGRES_DATABASE_URL)

RABBITMQ_URL = os.environ["RABBITMQ_URL"]

RABBITMQ_EXCHANGE = os.environ["RABBITMQ_EXCHANGE"]
RABBITMQ_QUEUE_NAME = os.environ["RABBITMQ_QUEUE_NAME"]


APP_NAME = os.environ["APP_NAME"]
LOG_LEVEL = os.environ["LOG_LEVEL"]
LOG_DIR = os.environ["LOG_DIR"]
LOG_JSON = True if os.environ["LOG_JSON"] == "True" else False
LOG_CONSOLE = True if os.environ["LOG_CONSOLE"] == "True" else False
LOG_MAX_FILE_SIZE = int(os.environ["LOG_MAX_FILE_SIZE_MB"]) * 1024 * 1024
LOG_BACKUP_COUNT = int(os.environ["LOG_BACKUP_COUNT"])
VERSION = os.environ["VERSION"]

DEFAULT_JOB_TIMEOUT_SECONDS = int(os.environ["DEFAULT_JOB_TIMEOUT_SECONDS"])
DEFAULT_JOB_MAX_RETRIES = int(os.environ["DEFAULT_JOB_MAX_RETRIES"])
DEFAULT_JOB_MIN_RETRY_DELAY_SECONDS = int(
    os.environ["DEFAULT_JOB_MIN_RETRY_DELAY_SECONDS"]
)

CLEANUP_JOB_TIMEOUT_SECONDS = int(os.environ["CLEANUP_JOB_TIMEOUT_SECONDS"])
CLEANUP_JOB_MAX_RETRIES = int(os.environ["CLEANUP_JOB_MAX_RETRIES"])
CLEANUP_JOB_MIN_RETRY_DELAY_SECONDS = int(
    os.environ["CLEANUP_JOB_MIN_RETRY_DELAY_SECONDS"]
)

REMINDER_JOB_TIMEOUT_SECONDS = int(os.environ["REMINDER_JOB_TIMEOUT_SECONDS"])
REMINDER_JOB_MAX_RETRIES = int(os.environ["REMINDER_JOB_MAX_RETRIES"])
REMINDER_JOB_MIN_RETRY_DELAY_SECONDS = int(
    os.environ["REMINDER_JOB_MIN_RETRY_DELAY_SECONDS"]
)


APSCHEDULER_MISFIRE_GRACE_SECONDS = int(os.environ["APSCHEDULER_MISFIRE_GRACE_SECONDS"])

CHECK_FOR_JOBS_INTERVAL_SECONDS = int(os.environ["CHECK_FOR_JOBS_INTERVAL_SECONDS"])

MFA_EXPIRY_JOB_INTERVAL_MINUTES = int(os.environ["MFA_EXPIRY_JOB_INTERVAL_MINUTES"])
