services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "127.0.0.1:5672:5672"   # AMQP
      - "127.0.0.1:15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-jobs:
    image: postgres:17
    container_name: postgres-jobs
    ports:
      - "127.0.0.1:5434:5432"
    environment:
      POSTGRES_DB: ${SCHEDULER_POSTGRES_DB}
      POSTGRES_USER: ${SCHEDULER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SCHEDULER_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    env_file:
      - .env
    volumes:
      - postgres-jobs-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SCHEDULER_POSTGRES_USER} -d ${SCHEDULER_POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scheduler
    ports:
      - "127.0.0.1:8002:8001"  # 8002 to avoid conflict with other microservices
    env_file:
      - .env
    depends_on:
      postgres-jobs:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-jobs-data:
  rabbitmq-data:
